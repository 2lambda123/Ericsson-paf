#!/usr/bin/python3

# SPDX-License-Identifier: BSD-3-Clause
# Copyright(c) 2020 Ericsson AB

from threading import Thread, Semaphore
import cmd
import collections
import datetime
import fcntl
import getopt
import os
import signal
import select
import shlex
import sys
import time

import paf.client as client
import paf.props as props


def usage(name):
    print("%s [-i <client_id>] <addr>" % name)
    print("%s [-i <client-id>] [-n <server-index>>] [-a] <domain>" % name)
    print("%s -l" % name)
    print("%s -h" % name)
    print("OPTIONS:")
    print("    -i <client_id>     Set client id to use, in hexadecimal. If "
          "not set, an\n"
          "                       id will be generated.")
    print("    -n <server-index>  Use specified server index. Default is 0.")
    print("    -a                 List all server addresses of "
          "specified domain.")
    print("    -l                 List all domains.")


def connect(server, client_id):
    try:
        return client.connect(server, client_id=client_id)
    except client.Error as e:
        print("Error communicationg with Patherfind server: %s." % str(e))
        sys.exit(1)


def orphan_left(ttl, since):
    timeout = since + ttl
    return timeout - time.time()


class MatchPrinter:
    def __init__(self, sub_id):
        self.sub_id = sub_id
        self.accepted = False
        self.failed = False

    def __call__(self, ta_id, event, *args, **optargs):
        if event == client.EventType.ACCEPT:
            self.accepted = True
        elif event == client.EventType.FAIL:
            self.fail_reason = optargs.get('fail_reason')
            self.failed = True
        elif event == client.EventType.NOTIFY:
            match_type = args[0]
            service_id = args[1]

            generation = optargs.get('generation')
            service_props = optargs.get('service_props')
            ttl = optargs.get('ttl')
            owner = optargs.get('client_id')
            orphan_since = optargs.get('orphan_since')

            info = [
                "Match type: %s" % match_type,
                "Service id: %x" % service_id
            ]

            if generation is not None:
                info.append("Generation: %d" % generation)

            if ttl is not None:
                info.append("TTL: %d" % ttl)

            if orphan_since is not None:
                info.append("Orphan: %.1f s until timeout" %
                            orphan_left(ttl, orphan_since))

            if owner is not None:
                info.append("Client Id: 0x%x" % owner)

            if service_props is not None:
                info.append("Properties: %s" % props.to_str(service_props))

            print("Subscription %x: %s" % (self.sub_id, "; ".join(info)))
        elif event == client.EventType.COMPLETE:
            print("Subscription %x canceled." % self.sub_id)


class Worker(Thread):
    def __init__(self, conn):
        Thread.__init__(self)
        self.conn = conn

        rfd, wfd = os.pipe()

        flags = fcntl.fcntl(rfd, fcntl.F_GETFL)
        fcntl.fcntl(rfd, fcntl.F_SETFL, flags | os.O_NONBLOCK)
        self.rpipe = os.fdopen(rfd, "br", 0)
        self.wpipe = os.fdopen(wfd, "bw", 0)

        self.fun_done = Semaphore(value=0)

    def run(self):
        signal.pthread_sigmask(signal.SIG_BLOCK, signal.valid_signals())

        try:
            done = False
            poll = select.poll()
            poll.register(self.conn.fileno(), select.EPOLLIN)
            poll.register(self.rpipe, select.EPOLLIN)
            while not done:
                poll.poll()
                self.conn.process()
                self.run_scheduled()
            self.exit()
        except Exception as e:
            print(str(e))
            self.exit()

    def exit(self):
        # just calling _exit() leaves the terminal in a messed-up state
        os.kill(os.getpid(), signal.SIGTERM)

    def dispatch_fun(self, fun):
        self.fun = fun
        self.wpipe.write(b'\0')
        self.fun_done.acquire()

    def run_scheduled(self):
        try:
            d = self.rpipe.read(1)
            if d is not None:
                self.fun()
                self.fun = None
                self.fun_done.release()
        except IOError:
            pass
        except Exception as e:
            print(e)
            self.exit()

    def _cmd_ping(self):
        try:
            start = time.time()
            self.conn.ping()
            latency = time.time() - start
            print("%.1f ms" % (latency*1000))
            self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_ping(self):
        self.dispatch_fun(self._cmd_ping)

    def _cmd_hello(self):
        try:
            proto_version = self.conn.hello()
            print("Negotiated Protocol Version: %d" % proto_version)
            self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_hello(self):
        self.dispatch_fun(self._cmd_hello)

    def _cmd_clients(self):
        try:
            clients = self.conn.clients()
            print("Client Id          Remote Address    Session Uptime")
            for c in clients:
                client_id, client_addr, client_time = c
                client_uptime = int(round(time.time() - client_time))
                uptime_s = datetime.timedelta(seconds=client_uptime)
                print("%-17x  %-17s %s" % (client_id, client_addr, uptime_s))
            self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_clients(self):
        self.dispatch_fun(self._cmd_clients)

    def _cmd_services(self, filter=None):
        try:
            services = self.conn.services(filter=filter)
            print("      Service Id  Gen  TTL  Orphan Tmo  Owner            "
                  "  Properties")
            for service in services:
                service_id = service[0]
                generation = service[1]
                service_props = service[2]
                service_ttl = service[3]
                service_owner = service[4]
                orphan_since = None
                if len(service) >= 6:
                    orphan_since = service[5].get('orphan_since')
                if orphan_since is None:
                    orphan_s = "-"
                else:
                    orphan_s = "%6.1f" % orphan_left(service_ttl, orphan_since)
                print("%16x %4d %4d %11s  %-17x  %s" %
                      (service_id, generation, service_ttl, orphan_s,
                       service_owner, props.to_str(service_props)))
            self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_services(self, filter=None):
        self.dispatch_fun(lambda: self._cmd_services(filter=filter))

    def _cmd_publish(self, service_id, generation, service_props, ttl):
        try:
            if service_id is None:
                service_id = self.conn.service_id()
                print("Service Id %x." % service_id)
            if self._check_service_id(service_id):
                self.conn.publish(service_id, generation, service_props, ttl)
                self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_publish(self, service_id, generation, service_props, ttl):
        self.dispatch_fun(lambda: self._cmd_publish(service_id, generation,
                                                    service_props, ttl))

    def _cmd_unpublish(self, service_id):
        try:
            if self._check_service_id(service_id):
                self.conn.unpublish(service_id)
                self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_unpublish(self, service_id):
        self.dispatch_fun(lambda: self._cmd_unpublish(service_id))

    def _cmd_subscribe(self, filter=None):
        sub_id = self.conn.subscription_id()
        print("Subscription Id %x." % sub_id)
        printer = MatchPrinter(sub_id)
        self.conn.subscribe(sub_id, printer, filter=filter)
        client.wait(self.conn, lambda: printer.accepted or printer.failed)
        if printer.accepted:
            self._ok()
        else:
            self._fail(printer.fail_reason)

    def cmd_subscribe(self, filter):
        self.dispatch_fun(lambda: self._cmd_subscribe(filter))

    def _cmd_unsubscribe(self, sub_id):
        try:
            if self._check_subscription_id(sub_id):
                self.conn.unsubscribe(sub_id)
                self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_unsubscribe(self, sub_id):
        self.dispatch_fun(lambda: self._cmd_unsubscribe(sub_id))

    def _cmd_subscriptions(self):
        try:
            subscriptions = self.conn.subscriptions()
            print("Subscription Id   Owner Id           Filter Expression")
            for subscription in subscriptions:
                sub_id = int(subscription[0])
                owner = subscription[1]
                filter = "-"
                if len(subscription) >= 3 and 'filter' in subscription[2]:
                    filter = subscription[2].get('filter')
                print("%-17x %-17x  %s" % (sub_id, owner, filter))
            self._ok()
        except client.Error as e:
            self._fail(e)

    def cmd_subscriptions(self):
        self.dispatch_fun(self._cmd_subscriptions)

    def _check_id(self, id_type, the_id):
        if the_id < 0:
            print("%s id must be a non-negative integer." % id_type)
            return False
        return True

    def _check_service_id(self, service_id):
        return self._check_id("Service", service_id)

    def _check_subscription_id(self, service_id):
        return self._check_id("Subscription", service_id)

    def _ok(self):
        print("OK.")

    def _fail(self, reason):
        if reason is not None:
            print(reason)
        else:
            print("Operation failed for unknown reasons.")


def init(server, client_id):
    conn = connect(server, client_id)
    worker = Worker(conn)
    worker.start()
    return worker


def parse_props(args):
    if len(args) % 2 != 0:
        raise ValueError("Service properties must be key-value pairs")
    service_props = collections.defaultdict(set)
    for i in range(0, len(args), 2):
        value = args[i+1]
        if value[0] == '|' and value[-1] == '|':
            value = value[1:-1]
        elif value.strip() == value:
            try:
                value = int(value)
            except ValueError:
                pass
        service_props[args[i]].add(value)
    return service_props


def parse_id(id_str):
    try:
        return int(id_str, 16)
    except ValueError:
        raise ValueError("'%s' is not a valid id" % id_str)


class PafCli(cmd.Cmd):
    prompt = '> '

    def __init__(self, worker):
        self.worker = worker
        cmd.Cmd.__init__(self)

    def do_id(self, line):
        """id
        Show local Pathfinder client id."""
        print("Client Id: 0x%x" % self.worker.conn.client_id)

    def do_ping(self, line):
        """ping
        Ping the server."""
        self.worker.cmd_ping()

    def do_hello(self, line):
        """hello
        Ask server for client id and version information."""
        self.worker.cmd_hello()

    def do_services(self, line):
        """services [<filter-expression>]
        List all services (optionally matching the filter expression)."""
        args = shlex.split(line)
        if len(args) == 1:
            filter = args[0]
        else:
            filter = None
        self.worker.cmd_services(filter=filter)

    def do_clients(self, line):
        """clients
        List clients connected to server."""
        self.worker.cmd_clients()

    def do_publish(self, line):
        """publish [<service-id>] <generation> <ttl> [<prop-name> <prop-value>] ...
        Publish a new service, or republish a service with updated
        properties.

        In case <prop-value> is an integer in decimal format, it will
        be added as an integer. Otherwise, the string property value type
        will be used. To force the use of strings, use '|<integer>|'
        (e.g. |4711|)."""
        try:
            args = shlex.split(line)
            if len(args) == 0:
                raise ValueError("Missing TTL and generation")
            elif len(args) % 2 != 0:
                service_id = int(args[0], 16)
                generation = int(args[1])
                ttl = int(args[2])
                prop_args = args[3:]
            else:
                service_id = None
                generation = int(args[0])
                ttl = int(args[1])
                prop_args = args[2:]
            service_props = parse_props(prop_args)
            self.worker.cmd_publish(service_id, generation, service_props, ttl)
        except ValueError as e:
            print("%s." % e)
        except IndexError:
            print("Service name is missing.")

    def do_unpublish(self, line):
        """unpublish <service-id>
        Unpublish a service."""
        try:
            service_id = parse_id(line)
            self.worker.cmd_unpublish(service_id)
        except ValueError as e:
            print("%s." % e)

    def do_subscribe(self, line):
        """subscribe [<filter-expression>]
        Subscribe to changes in services (with optional filter expression)."""
        try:
            args = shlex.split(line)
            if len(args) == 1:
                filter = args[0]
            else:
                filter = None
            self.worker.cmd_subscribe(filter=filter)
        except ValueError as e:
            print("%s." % e)
        except IndexError:
            print("Subscription filter expression is missing.")

    def do_unsubscribe(self, line):
        """unsubscribe <subscription-id>
        Unsubscribe a service."""
        try:
            ta_id = parse_id(line)
            self.worker.cmd_unsubscribe(ta_id)
        except ValueError as e:
            print("%s." % e)

    def do_subscriptions(self, line):
        """subscriptions
        List all subscriptions."""
        self.worker.cmd_subscriptions()

    def do_quit(self, line):
        """quit
        Close the connection and quit."""
        print("")
        return True

    def do_help(self, line):
        """help [<topic>]
        List all command, or print help text for the specified command."""
        cmd.Cmd.do_help(self, line)

    def emptyline(self):
        pass
    do_EOF = do_quit


def list_servers(args):
    if len(args) != 1:
        print("Domain is missing.")
        sys.exit(1)

    servers = client.read_domain(args[0])

    print('\n'.join([server.addr for server in servers]))

    sys.exit(0)


def list_domains(args):
    if len(args) > 0:
        usage(sys.argv[0])
        sys.exit(1)

    domains = client.list_domains()

    print('\n'.join(domains))

    sys.exit(0)


if __name__ == '__main__':
    try:
        client_id = None
        list_addrs = False
        server_num = None

        optlist, args = getopt.getopt(sys.argv[1:], 'i:n:alh')

        for opt, optval in optlist:
            if opt == '-i':
                client_id = int(optval, 16)
            elif opt == '-n':
                server_num = int(optval)
            elif opt == '-a':
                list_servers(args)
            elif opt == '-l':
                list_domains(args)
            elif opt == '-h':
                usage(sys.argv[0])
                sys.exit(0)

        if len(args) != 1:
            usage(sys.argv[0])
            sys.exit(1)

        servers = client.read_domain(args[0])

        if len(servers) == 0:
            if server_num is not None:
                print("Domain \"%s\" does not exist, but yet a server "
                      "was index specified." % args[0])
                sys.exit(1)

            server = args[0]
        else:
            if server_num is None:
                server = servers[0]
            elif server_num < len(servers):
                server = servers[server_num]
            else:
                print("No server address with index %d." % server_num)
                sys.exit(1)

        worker = init(server, client_id)

        cli = PafCli(worker)

        cli.cmdloop()

        os._exit(0)
    except getopt.GetoptError as e:
        print("Error parsning command line: %s." % e)
        sys.exit(1)

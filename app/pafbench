#!/usr/bin/python3

# SPDX-License-Identifier: BSD-3-Clause
# Copyright(c) 2020 Ericsson AB

import sys
import select
import time

import paf.client as client


def usage(name):
    print("%s <num-services> <num-subscriptions> <addr>" % name)


def wait_for(conn, criteria):
    poll = select.poll()
    poll.register(conn.fileno(), select.EPOLLIN)
    while not criteria():
        poll.poll()
        conn.process()


class EventCounter:
    def __init__(self, event_type, target):
        self.target = target
        self.event_type = event_type
        self.events = []

    def __call__(self, ta_id, event_type, *args, **optargs):
        if self.event_type == event_type:
            self.events.append(args)

    def done(self):
        return len(self.events) == self.target


MAX_BATCH_SIZE = 1024

def batch_op(start_num, count, op, done_event):
    completed = 0
    while completed < count:
        left = count - completed
        batch_size = min(MAX_BATCH_SIZE, left)

        counter = EventCounter(done_event, batch_size)

        for i in range(batch_size):
            op(start_num + completed + i, counter)

        wait_for(conn, counter.done)

        completed += batch_size

def subscribe(conn, start_num, count):
    def subscribe_op(i, cb):
        conn.subscribe(i, cb, filter="(name=service-%d)" % i)
    batch_op(start_num, count, subscribe_op, client.EventType.ACCEPT)

def unsubscribe(conn, start_num, count):
    def unsubscribe_op(i, cb):
        conn.unsubscribe(i, cb)
    batch_op(start_num, count, unsubscribe_op, client.EventType.COMPLETE)

def publish(conn, start_num, count):
    ttl = 1
    generation = 0
    def publish_op(i, cb):
        service_id = i
        conn.publish(service_id, generation, {
            "name": {"service-%d" % i},
            "addr": {"tls:10.10.10.10:4711"},
            "color": {"green"}
        }, ttl, cb)
    batch_op(start_num, count, publish_op, client.EventType.COMPLETE)

def unpublish(conn, start_num, count):
    def unpublish_op(i, cb):
        conn.unpublish(i, cb)
    batch_op(start_num, count, unpublish_op, client.EventType.COMPLETE)

def ping(conn, count):
    def ping_op(i, cb):
        conn.ping(cb)
    batch_op(0, count, ping_op, client.EventType.COMPLETE)

def pre_populate(conn, num_services, num_subscriptions):
    subscribe(conn, 0, num_subscriptions)
    publish(conn, 0, num_services)


def cleanup(conn, num_services):
    unpublish(conn, 0, num_services)


TEST_ITER = 16


def benchmark_publish_unpublish(conn, num_services, num_subscriptions):
    print("Pathfinder pre-populated state")
    print("------------------------------")
    print("Services: %d" % num_services)
    print("Subscriptions: %d" % num_subscriptions)

    pre_populate(conn, num_services, num_subscriptions)

    print("\nResults")
    print("-------")

    start = time.time()
    subscribe(conn, num_subscriptions, TEST_ITER)
    latency = time.time() - start

    print("Subscribe: %.3f ms/op" % (1000*(latency/TEST_ITER)))

    start = time.time()
    unsubscribe(conn, num_subscriptions, TEST_ITER)
    latency = time.time() - start

    print("Unsubscribe: %.3f ms/op" % (1000*(latency/TEST_ITER)))

    start = time.time()
    publish(conn, num_services, TEST_ITER)
    latency = time.time() - start

    print("Publish: %.3f ms/op" % (1000*(latency/TEST_ITER)))

    start = time.time()
    unpublish(conn, num_services, TEST_ITER)
    latency = time.time() - start

    print("Unpublish: %.3f ms/op" % (1000*(latency/TEST_ITER)))

    start = time.time()
    ping(conn, TEST_ITER)
    latency = time.time() - start

    print("Ping: %.3f ms/op" % (1000*(latency/TEST_ITER)))

    cleanup(conn, num_services)


if len(sys.argv) != 4:
    usage(sys.argv[0])
    sys.exit(1)

num_services = int(sys.argv[1])
num_subscriptions = int(sys.argv[2])
addr = sys.argv[3]

conn = client.connect(addr)
benchmark_publish_unpublish(conn, num_services, num_subscriptions)
conn.close()
